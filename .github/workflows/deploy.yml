name: Build and Deploy to Middleware Server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'warning'
        type: choice
        options:
          - midprod_frontend
          - midtest_frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: |
          npm test -- --watchAll=false --ci

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Update AuthConfig.js
        shell: pwsh
        run: |
          $envType = "${{ github.event.inputs.environment }}"
          $filePath = "./src/components/Microsoft/AuthConfig.js"
          
          if ($envType -eq "midprod_frontend") {
            (Get-Content -Path "./src/components/Microsoft/AuthConfig.js") -replace "auth: localConfig,", "auth: prodConfig," | Set-Content -Path "./src/components/Microsoft/AuthConfig.js"
            Write-Output "AuthConfig.js found. Updating with production configurations."
          } elseif ($envType -eq "midtest_frontend") {
            (Get-Content -Path "./src/components/Microsoft/AuthConfig.js") -replace "auth: localConfig,", "auth: testConfig," | Set-Content -Path "./src/components/Microsoft/AuthConfig.js"
            Write-Output "AuthConfig.js found. Updating with test configurations."
          }

      - name: Update ProfileState.js
        shell: pwsh
        run: |      
          $envType = "${{ github.event.inputs.environment }}"
          $filePath = "./src/hooks/ProfileState.js"
          
          if ($envType -eq "midprod_frontend") {
            (Get-Content -Path $filePath) -replace "const serverConnection = localHost;", "const serverConnection = prodHost;" | Set-Content -Path $filePath
            Write-Output "ProfileState.js found. Updating with production host"
          } elseif ($envType -eq "midtest_frontend") {
            (Get-Content -Path $filePath) -replace "const serverConnection = localHost;", "const serverConnection = testHost;" | Set-Content -Path $filePath
            Write-Output "ProfileState.js found. Updating with test host"
          }

      - name: Update server.js
        shell: pwsh
        run: |
          $envType = "${{ github.event.inputs.environment }}"
          $filePath = "./server/server.js"
          
          if ($envType -eq "midprod_frontend") {
            (Get-Content -Path $filePath) -replace "portConfiguration.localPort;", "portConfiguration.prodPort;" | Set-Content -Path $filePath
            Write-Output "server.js found. Updating with production port"
          } elseif ($envType -eq "midtest_frontend") {
            (Get-Content -Path $filePath) -replace "portConfiguration.localPort;", "portConfiguration.testPort;" | Set-Content -Path $filePath
            Write-Output "server.js found. Updating with test port"
          }
          
          Write-Output "Enabling HTTPS app service"
          $content = Get-Content -Path $filePath -Raw
          $content = $content -replace '(?m)^(app\.listen\(PORT.*)', '// $1'
          $content = $content -replace '(?m)^//(\s*const certificates = {)', '$1'
          $content = $content -replace '(?m)^//(\s*middlewareTest: {)', '$1'
          $content = $content -replace '(?m)^//(\s*pfx: fs\.readFileSync.*)', '$1'
          $content = $content -replace '(?m)^//(\s*passphrase:.*)', '$1'
          $content = $content -replace '(?m)^//(\s*}};)', '$1'
          $content = $content -replace '(?m)^//(\s*const httpsServer = https.createServer.*)', '$1'
          $content = $content -replace '(?m)^//(\s*httpsServer.listen\(PORT\);)', '$1'
          Set-Content -Path $filePath -Value $content
          Write-Output "HTTPS app service enabled"

      - name: Build Project
        run: |
          export CI=false
          npm run build

      - name: Create Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-build
          path: |
            ${{ github.workspace }}/build         

      - name: Create Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-server
          path: |
            ${{ github.workspace }}/server

      - name: Create Port Configuration Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-portconfiguration
          path: |
            ${{ github.workspace }}/src/portConfigurtion.js

  deploy:
    needs: build
    runs-on: ${{ inputs.environment == 'midprod_frontend' && 'self-hosted' ||
      inputs.environment == 'midtest_frontend' && 'self-hosted' }}
    steps:
      - name: Stop Node.js Service Before Server Update
        shell: powershell
        run: |
          $serviceName = "MID_AI_BOT_NODE_SERVICE"
          $nssmPath = "C:\nssm-2.24\nssm-2.24\win64\nssm.exe"
          $serviceExists = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          
          if ($serviceExists) {
          Write-Output "Stopping service $serviceName before updating server files..."
          & $nssmPath stop $serviceName
          Start-Sleep -Seconds 3
          Write-Output "Service $serviceName stopped."
          }

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: ragbot-build
          path: C:\middleware\MID_AI\build

      - name: Download port configuration file
        uses: actions/download-artifact@v4
        with:
          name: ragbot-portconfiguration
          path: C:\middleware\MID_AI\src

      - name: Download backend server files
        uses: actions/download-artifact@v4
        with:
          name: ragbot-server
          path: C:\middleware\MID_AI\server

      - name: Install Server Dependencies
        run: |
          cd C:\middleware\MID_AI\server
          npm install

      - name: Deploy to IIS
        shell: powershell
        run: |
          $websiteName = "mid_ai-bot"
          $iisPath = "IIS:\Sites\$websiteName"
          $buildPath = "C:\middleware\MID_AI\build"
          $srcPath = "C:\middleware\MID_AI\src"
          $serverPath = "C:\middleware\MID_AI\server"
          $certificateThumbprint = "5A89675513DE81A903ABA94A904F48F3941F661C"
          $certStoreLocation = "My"
          $httpPort = 3449
          $httpsPort = 3448

          # Ensure the directories exist
          New-Item -ItemType Directory -Path $buildPath -Force | Out-Null
          New-Item -ItemType Directory -Path $srcPath -Force | Out-Null
          New-Item -ItemType Directory -Path $serverPath -Force | Out-Null
          
          # Import IIS Module
          Import-Module WebAdministration

          # Check if the IIS site exists
          if (Get-Website -Name $websiteName -ErrorAction SilentlyContinue) {
              Write-Output "Website $websiteName exists. Updating..."
              Stop-Website -Name $websiteName
          } else {
              Write-Output "Creating new website $websiteName... on port $httpPort"
              New-Website -Name $websiteName -PhysicalPath $buildPath -Port $httpPort
          }
          
          # Ensure HTTPS binding is added
          if (-not (Get-WebBinding -Name $websiteName -Protocol "https" -ErrorAction SilentlyContinue)) {
            Write-Output "Adding HTTPS binding on port $httpsPort..."
            New-WebBinding -Name $websiteName -IPAddress "*" -Port $httpsPort -Protocol https
          } else {
              Write-Output "HTTPS binding already exists."
          }
          
          # Assign SSL Certificate to HTTPS binding
          Write-Output "Assigning SSL Certificate to $websiteName..."
          $binding = Get-WebBinding -Name $websiteName -Port $httpsPort -Protocol "https"
          if ($binding) {
              $binding.AddSslCertificate($certificateThumbprint, $certStoreLocation)
              Write-Output "SSL Certificate assigned successfully."
          } else {
              Write-Output "Failed to assign SSL certificate: Binding not found."
          }
          
          # Restart IIS site
          Start-Website -Name $websiteName
          Write-Output "Deployment complete!"

  post_config:
    needs: deploy
    runs-on: ${{ inputs.environment == 'midprod_frontend' && 'self-hosted' ||
      inputs.environment == 'midtest_frontend' && 'self-hosted' }}
    steps:
      - name: Create or Restart Node Service
        shell: powershell
        run: |
          $serviceName = "MID_AI_BOT_NODE_SERVICE"
          $nssmPath = "C:\nssm-2.24\nssm-2.24\win64\nssm.exe"
          $appDir = "C:\middleware\MID_AI\server"
          $nodePath = "C:\Program Files\nodejs\node.exe"
          $scriptPath = "$appDir\index.js"

          # Check if service exists
          $serviceExists = Get-Service -Name $serviceName -ErrorAction SilentlyContinue

          if ($serviceExists) {
          Write-Output "Service $serviceName already exists. Restarting..."
          & $nssmPath stop $serviceName
          Start-Sleep -Seconds 3
          & $nssmPath start $serviceName
          Write-Output "Service restarted."
          } else {
            Write-Output "Service $serviceName does not exist. Creating it..."
            & $nssmPath install $serviceName $nodePath $scriptPath
            & $nssmPath set $serviceName AppDirectory $appDir
            & $nssmPath set $serviceName Start SERVICE_AUTO_START
            & $nssmPath start $serviceName
            & $nssmPath set $serviceName Description "Node.js service for HR Rewards backend"
            & $nssmPath set UT2003 AppThrottle 1500
            & $nssmPath set UT2003 AppExit Default Restart
            & $nssmPath set UT2003 AppRestartDelay 0

            Write-Output "NodeJS Service created and started."
          }