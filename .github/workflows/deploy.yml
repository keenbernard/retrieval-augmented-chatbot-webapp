
name: Build and Deploy to Middleware Server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'warning'
        type: choice
        options:
          - midprod_frontend
          - midtest_frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: |
          npm test -- --watchAll=false --ci

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: |
          export CI=false
          npm run build

      - name: Create Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-build
          path: |
            ${{ github.workspace }}/build

      - name: Create Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-server
          path: |
            ${{ github.workspace }}/server

      - name: Create Port Configuration Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-portconfiguration
          path: |
            ${{ github.workspace }}/src/portConfigurtion.js

  deploy:
    needs: build
    runs-on: ${{ inputs.environment == 'midprod_frontend' && 'self-hosted' ||
      inputs.environment == 'midtest_frontend' && 'self-hosted' }}
    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: ragbot-build
          path: C:\middleware\MID_AI\build

      - name: Download port configuration file
        uses: actions/download-artifact@v4
        with:
          name: ragbot-portconfiguration
          path: C:\middleware\MID_AI\src

      - name: Download backend server files
        uses: actions/download-artifact@v4
        with:
          name: ragbot-server
          path: C:\middleware\MID_AI\server

      - name: Install Server Dependencies
        run: |
          cd C:\middleware\MID_AI\server
          npm install

      - name: Deploy to IIS
        shell: powershell
        run: |
          $websiteName = "mid_ai-bot"
          $iisPath = "IIS:\Sites\$websiteName"
          $buildPath = "C:\middleware\MID_AI\build"
          $certificateThumbprint = "5A89675513DE81A903ABA94A904F48F3941F661C"
          $certStoreLocation = "Cert:\LocalMachine\My"
          $httpPort = 3449
          $httpsPort = 3448

          # Ensure the directories exist
          New-Item -ItemType Directory -Path $buildPath -Force | Out-Null
          New-Item -ItemType Directory -Path "C:\middleware\MID_AI\src" -Force | Out-Null
          New-Item -ItemType Directory -Path "C:\middleware\MID_AI\server" -Force | Out-Null
          
          # Import IIS Module
          Import-Module WebAdministration

          # Check if the IIS site exists
          if (Get-Website -Name $websiteName -ErrorAction SilentlyContinue) {
              Write-Output "Website $websiteName exists. Updating..."
              Stop-Website -Name $websiteName
          } else {
              Write-Output "Creating new website $websiteName..."
              New-Website -Name $websiteName -PhysicalPath $buildPath -Port $httpPort
          }
          
          # Ensure HTTP Binding Exists
          $httpBinding = Get-WebBinding -Name $websiteName -Protocol "http" -Port $httpPort -ErrorAction SilentlyContinue
          if (-not $httpBinding) {
          Write-Output "Adding HTTP binding on port $httpPort..."
          New-WebBinding -Name $websiteName -IPAddress "*" -Port $httpPort -Protocol http
          }
          
          # Ensure HTTPS binding exists
          if (-not (Get-WebBinding -Name $websiteName -Protocol "https" -ErrorAction SilentlyContinue)) {
            Write-Output "Adding HTTPS binding on port $httpsPort..."
            New-WebBinding -Name $websiteName -IPAddress "*" -Port $httpsPort -Protocol https
          }
          
          # Check if SSL Certificate is already assigned
            Write-Output "Checking if SSL Certificate is already assigned..."
            $existingSSL = netsh http show sslcert | Select-String "172.21.56.34:$httpsPort"
            
            # Assign SSL Certificate to HTTPS binding
            if ($existingSSL) {
            Write-Output "SSL Certificate already assigned to port $httpsPort."
          } else {
            Write-Output "Assigning SSL Certificate to $websiteName..."
            $cmd = "netsh http add sslcert ipport=172.21.56.34:$httpsPort certhash=$certificateThumbprint appid='{4dc3e181-e14b-4a21-b022-59fc669b0914}' certstorename=My verifyclientcertrevocation=enable verifyrevocationwithcachedclientcertonly=disable"
            Invoke-Expression $cmd
            Write-Output "SSL Certificate assigned successfully."
          }
          
          # Get the existing site binding
          $binding = Get-WebBinding -Name $websiteName -Protocol https -Port $httpsPort -ErrorAction SilentlyContinue
          
          # Assign SSL Certificate to IIS HTTPS Binding
          Write-Output "Assigning SSL Certificate to $websiteName..."
          Set-ItemProperty -Path "IIS:\Sites\$websiteName\bindings" -Filter "protocol='https' -port='$httpsPort'" -Name "certStoreName" -Value $certStoreLocation
          Set-ItemProperty -Path "IIS:\Sites\$websiteName\bindings" -Filter "protocol='https' -port='$httpsPort'" -Name "certThumbprint" -Value $certificateThumbprint
          Write-Output "SSL Certificate assigned successfully."
          
          # Restart IIS site
          Start-Website -Name $websiteName
          Write-Output "Deployment complete!"
