name: Build and Deploy to Middleware Server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'warning'
        type: choice
        options:
          - midprod_frontend
          - midtest_frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: |
          npm test -- --watchAll=false --ci

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: |
          export CI=false
          npm run build

      - name: Create Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-build
          path: |
            ${{ github.workspace }}/build

      - name: Create Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-server
          path: |
            ${{ github.workspace }}/server

      - name: Create Port Configuration Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragbot-portconfiguration
          path: |
            ${{ github.workspace }}/src/portConfigurtion.js

  deploy:
    needs: build
    runs-on: ${{ inputs.environment == 'midprod_frontend' && 'self-hosted' ||
      inputs.environment == 'midtest_frontend' && 'self-hosted' }}
    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: ragbot-build
          path: C:\middleware\MID_AI\build

      - name: Download port configuration file
        uses: actions/download-artifact@v4
        with:
          name: ragbot-portconfiguration
          path: C:\middleware\MID_AI\src

      - name: Download backend server files
        uses: actions/download-artifact@v4
        with:
          name: ragbot-server
          path: C:\middleware\MID_AI\server

      - name: Install Server Dependencies
        run: |
          cd C:\middleware\MID_AI\server
          npm install

      - name: Deploy to IIS (HTTPS Configuration)
        shell: powershell
        run: |
          $websiteName = "mid_ai-bot"
          $iisPath = "IIS:\Sites\$websiteName"
          $buildPath = "C:\middleware\MID_AI\build"
          $sslCertName = "belizetelemedia_Wildcard-2024"
          $httpsPort = 3448
          
          # Ensure the directories exist
          New-Item -ItemType Directory -Path $buildPath -Force | Out-Null
          New-Item -ItemType Directory -Path "C:\middleware\MID_AI\src" -Force | Out-Null
          New-Item -ItemType Directory -Path "C:\middleware\MID_AI\server" -Force | Out-Null
          
          # Check if the IIS site exists
          if (Get-Website -Name $websiteName -ErrorAction SilentlyContinue) {
              Write-Output "Website $websiteName exists. Updating..."
              Stop-Website -Name $websiteName
          } else {
              Write-Output "Creating new website $websiteName..."
              New-Website -Name $websiteName -PhysicalPath $buildPath -Port $httpsPort
          }
          
          # Ensure HTTPS Binding Exists
          $existingBinding = Get-WebBinding -Name $websiteName -Protocol "https" -ErrorAction SilentlyContinue
          if (-not $existingBinding) {
              Write-Output "Adding HTTPS binding to $websiteName on port $httpsPort..."
              New-WebBinding -Name $websiteName -IPAddress "*" -Port $httpsPort -Protocol https
          } else {
              Write-Output "HTTPS binding already exists."
          }
          
          # Assign SSL Certificate
          Write-Output "Assigning SSL Certificate: $sslCertName"
          $cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.FriendlyName -eq $sslCertName }
          if ($cert) {
              $certThumbprint = $cert.Thumbprint
              $cmd = "netsh http add sslcert ipport=0.0.0.0:$httpsPort certhash=$certThumbprint appid={`{00112233-4455-6677-8899-AABBCCDDEEFF`}}"
              Invoke-Expression $cmd
              Write-Output "SSL Certificate assigned successfully."
          } else {
              Write-Output "ERROR: SSL Certificate '$sslCertName' not found in LocalMachine\My store!"
              exit 1
          }
          
          # Restart IIS site
          Start-Website -Name $websiteName
          Write-Output "Deployment complete with HTTPS enabled!"
    
